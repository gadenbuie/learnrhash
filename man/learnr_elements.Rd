% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny.R
\name{learnr_elements}
\alias{learnr_elements}
\alias{decoder_logic}
\alias{decoder_ui}
\alias{encoder_logic}
\alias{default_ui}
\alias{iframe_ui}
\alias{encoder_ui}
\title{Learnr addon elements}
\usage{
decoder_logic()

decoder_ui()

encoder_logic(strip_output = FALSE)

default_ui(url = "http://google.com")

iframe_ui(src = "http://google.com", ...)

encoder_ui(ui_before = default_ui(), ui_after = NULL)
}
\arguments{
\item{strip_output}{Exercises save their output as html, for exercises
that result in plots these can result in very large hashes. The option allows
this information to be removed to keep hash sizes more manageable.}

\item{url}{Link url to use.}

\item{src}{Source of the iframe.}

\item{...}{Other iframe attributes, e.g. height and width}

\item{ui_before}{Shiny ui elements to include before the hash ui}

\item{ui_after}{Shiny ui elements to include after the hash ui,}
}
\description{
The following are addon element for learnr tutorials that enable the encoding and
decoding of hashed learnr solutions.

Note that when including these functions in a learnr Rmd document it is necessary that
the logic functions, \verb{*_logic()}, be included in an R chunk where \code{context="server"} as
they interact with the underlying Shiny functionality. Conversely, any of the ui functions,
\verb{*_ui()}, must \emph{not} be included in an R chunk with a \code{context}. Both types of functions
have been written to provide useful feedback if they detect they are in the wrong R chunk
type.
}
\details{
For either of the ui parameters you can wrap multiple
shiny elements together with \code{shiny::div}.
}
